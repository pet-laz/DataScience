import numpy as np
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.regularizers import l2

# 1. Список уникальных симптомов
unique_symptoms = [
    'Кашель', 'Лихорадка', 'Головная боль', 'Насморк', 'Боль в горле',
    'Одышка', 'Усталость', 'Боль в мышцах', 'Чихание', 'Слабость',
    'Тошнота', 'Рвота', 'Диарея', 'Потливость', 'Озноб',
    'Заложенность носа', 'Потеря аппетита', 'Потеря вкуса', 'Потеря обоняния', 'Сыпь',
    'Сухость во рту', 'Головокружение', 'Боль в груди', 'Покраснение глаз', 'Зуд',
    'Боль в животе', 'Судороги', 'Учащенное сердцебиение', 'Повышенная температура', 'Снижение веса'
]

# 2. Данные: симптомы и соответствующие диагнозы
symptoms = np.array([
    ['Кашель', 'Лихорадка', 'Головная боль'],
    ['Насморк', 'Кашель', 'Боль в горле'],
    ['Лихорадка', 'Кашель', 'Одышка'],
    ['Боль в горле', 'Озноб', 'Слабость'],
    ['Насморк', 'Головная боль', 'Чихание'],
    ['Тошнота', 'Рвота', 'Усталость'],
    ['Диарея', 'Боль в мышцах', 'Потливость'],
    ['Одышка', 'Слабость', 'Потеря вкуса'],
    ['Заложенность носа', 'Потеря обоняния', 'Чихание'],
    ['Кашель', 'Слабость', 'Потеря аппетита'],
    ['Сыпь', 'Потливость', 'Озноб'],
    ['Лихорадка', 'Тошнота', 'Слабость'],
    ['Головная боль', 'Слабость', 'Боль в мышцах'],
    ['Кашель', 'Одышка', 'Слабость'],
    ['Насморк', 'Потливость', 'Боль в горле'],
    ['Тошнота', 'Рвота', 'Диарея'],
    ['Лихорадка', 'Чихание', 'Заложенность носа'],
    ['Боль в горле', 'Сыпь', 'Потеря обоняния'],
    ['Головная боль', 'Тошнота', 'Потеря вкуса'],
    ['Кашель', 'Озноб', 'Потеря аппетита'],
    ['Сухость во рту', 'Головная боль', 'Зуд'],
    ['Боль в груди', 'Учащенное сердцебиение', 'Одышка'],
    ['Заложенность носа', 'Головокружение', 'Усталость'],
    ['Снижение веса', 'Тошнота', 'Боль в животе'],
    ['Потливость', 'Головокружение', 'Покраснение глаз'],
    ['Слабость', 'Судороги', 'Головная боль'],
    ['Кашель', 'Лихорадка', 'Повышенная температура'],
    ['Одышка', 'Учащенное сердцебиение', 'Сухость во рту'],
    ['Головная боль', 'Зуд', 'Потливость'],
    ['Тошнота', 'Потеря аппетита', 'Боль в животе'],
    ['Диарея', 'Озноб', 'Усталость'],
    ['Кашель', 'Боль в груди', 'Потеря вкуса'],
    ['Насморк', 'Сыпь', 'Заложенность носа'],
    ['Лихорадка', 'Боль в горле', 'Одышка'],
    ['Сухость во рту', 'Слабость', 'Зуд'],
    ['Головная боль', 'Снижение веса', 'Тошнота'],
    ['Одышка', 'Боль в груди', 'Учащенное сердцебиение'],
    ['Заложенность носа', 'Головная боль', 'Сухость во рту'],
    ['Головокружение', 'Потеря вкуса', 'Боль в мышцах'],
    ['Тошнота', 'Судороги', 'Слабость'],
    ['Боль в животе', 'Диарея', 'Озноб'],
    ['Зуд', 'Покраснение глаз', 'Потливость'],
    ['Повышенная температура', 'Лихорадка', 'Головная боль'],
    ['Кашель', 'Тошнота', 'Головная боль'],
    ['Сыпь', 'Потливость', 'Зуд'],
    ['Головокружение', 'Потеря аппетита', 'Снижение веса'],
    ['Боль в горле', 'Судороги', 'Головная боль'],
    ['Заложенность носа', 'Сухость во рту', 'Головная боль'],
    ['Кашель', 'Слабость', 'Боль в груди'],
    ['Кашель', 'Лихорадка', 'Сухость во рту'],
    ['Озноб', 'Сыпь', 'Тошнота'],
    ['Покраснение глаз', 'Заложенность носа', 'Учащенное сердцебиение'],
    ['Повышенная температура', 'Зуд', 'Головная боль'],
    ['Потливость', 'Снижение веса', 'Покраснение глаз'],
    ['Слабость', 'Тошнота', 'Сухость во рту'],
    ['Головная боль', 'Одышка', 'Повышенная температура'],
    ['Чихание', 'Потеря обоняния', 'Заложенность носа'],
    ['Сухость во рту', 'Боль в груди', 'Повышенная температура'],
    ['Кашель', 'Головная боль', 'Одышка'],
    ['Лихорадка', 'Сыпь', 'Слабость'],
    ['Головокружение', 'Боль в мышцах', 'Заложенность носа'],
    ['Боль в горле', 'Тошнота', 'Потливость'],
    ['Потеря аппетита', 'Головокружение', 'Боль в мышцах'],
    ['Озноб', 'Кашель', 'Потеря обоняния'],
    ['Усталость', 'Чихание', 'Зуд'],
    ['Зуд', 'Покраснение глаз', 'Головная боль'],
    ['Головокружение', 'Слабость', 'Головная боль'],
    # ['Потливость', 'Боль в животе', 'Озноб']
])

diagnoses = np.array([
    'Грипп', 'Простуда', 'Пневмония', 'Тонзиллит', 'Аллергия',
    'Гастрит', 'Ротавирус', 'Ковид-19', 'Синусит', 'Бронхит',
    'Скарлатина', 'Менингит', 'Миозит', 'Астма', 'Ринит',
    'Гастроэнтерит', 'ОРВИ', 'Краснуха', 'Энцефалит', 'Анорексия',
    'Герпес', 'Аритмия', 'Гайморит', 'Панкреатит', 'Конъюнктивит',
    'Эпилепсия', 'Гипертония', 'Стенокардия', 'Анемия', 'Мигрень',
    'Ветряная оспа', 'Инфаркт', 'Ларингит', 'Гипогликемия', 'Псориаз',
    'Язва желудка', 'Холецистит', 'Плеврит', 'Дискинезия', 'Демодекоз',
    'Сепсис', 'Гипотиреоз', 'Отит', 'Гепатит', 'Депрессия',
    'Тромбоз', 'Гастроэзофагеальная рефлюксная болезнь', 'Пиелонефрит', 'Панкреатит',
    'Псориаз', 'Гепатит', 'Анемия', 'Мигрень', 'Конъюнктивит',
    'Тромбоз', 'Аритмия', 'Инфаркт', 'Язва желудка', 'Дискинезия',
    'Гипотиреоз', 'Ларингит', 'Аритмия', 'Гастрит', 'ОРВИ',
    'Тонзиллит', 'Простуда', 'Грипп'
])
# 3. Функция для кодирования симптомов в бинарный вектор
def encode_symptoms(symptom_list, unique_symptoms):
    encoded_vector = np.zeros(len(unique_symptoms))
    for symptom in symptom_list:
        if symptom in unique_symptoms:
            index = unique_symptoms.index(symptom)
            encoded_vector[index] = 1
    return encoded_vector

# 4. Кодирование всех наборов симптомов
encoded_symptoms = np.array([encode_symptoms(symptom_list, unique_symptoms) for symptom_list in symptoms])

# 5. Кодирование диагнозов
encoder_diagnoses = OneHotEncoder(sparse_output=False)
encoded_diagnoses = encoder_diagnoses.fit_transform(diagnoses.reshape(-1, 1))
# 6. Разделение данных на обучающие и тестовые
X_train, X_test, y_train, y_test = train_test_split(encoded_symptoms, encoded_diagnoses, test_size=0.8, random_state=84)

# 7. Создание и компиляция модели
model = Sequential([
    Dense(64, input_dim=X_train.shape[1], activation='relu', kernel_regularizer=l2(0.01)),
    Dropout(0.5),
    Dense(32, activation='relu', kernel_regularizer=l2(0.01)),
    Dropout(0.5),
    Dense(16, activation='relu', kernel_regularizer=l2(0.01)),
    Dropout(0.5),
    Dense(y_train.shape[1], activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# 8. Обучение модели
history = model.fit(X_train, y_train, epochs=400, validation_data=(X_test, y_test), verbose=1)
# 9. Оценка модели на тестовых данных
test_loss, test_accuracy = model.evaluate(X_test, y_test, verbose=1)
print(f'Test Accuracy: {test_accuracy:.2f}')

# 10. Предсказание нового диагноза
new_symptom_input = ['Кашель', 'Лихорадка', 'Головная боль']  # Пример новых симптомов
new_encoded_symptoms = encode_symptoms(new_symptom_input, unique_symptoms).reshape(1, -1)

predictions = model.predict(new_encoded_symptoms)

# Получение всех диагнозов с их вероятностями
predicted_probabilities = predictions.flatten()  # Плоский массив вероятностей
diagnosis_prob_pairs = list(zip(encoder_diagnoses.categories_[0], predicted_probabilities))

# Сортировка диагнозов по вероятности
sorted_diagnosis_prob_pairs = sorted(diagnosis_prob_pairs, key=lambda x: x[1], reverse=True)

# Вывод всех диагнозов с их вероятностями
print("All predicted diagnoses with probabilities:")
for diagnosis, probability in sorted_diagnosis_prob_pairs:
    print(f"{diagnosis}: {probability:.4f}")

# Находим наиболее вероятный диагноз
predicted_diagnosis = encoder_diagnoses.inverse_transform(predictions)
print(f"\nMost likely diagnosis: {predicted_diagnosis[0]} with probability {sorted_diagnosis_prob_pairs[0][1]:.4f}")
